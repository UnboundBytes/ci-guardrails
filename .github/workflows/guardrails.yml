name: Guardrails
on:
  workflow_call:
    inputs:
      service-name:
        description: 'Name of the service being validated'
        required: true
        type: string
      service-path:
        description: 'Path to the service directory'
        required: true
        type: string
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      enable-playwright:
        description: 'Enable Playwright E2E tests'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # Zero-Knowledge Compliance Check
  zk-compliance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npm ci
          fi

      - name: Zero-Knowledge Compliance Check
        run: |
          echo "üîê Running Zero-Knowledge compliance checks..."
          
          # Check for plaintext data storage
          if grep -r "localStorage\|sessionStorage\|plaintext\|unencrypted" ${{ inputs.service-path }}/src --include="*.js" --include="*.ts"; then
            echo "‚ùå ZK Violation: Plaintext storage detected"
            exit 1
          fi
          
          # Check for server-side decryption
          if grep -r "decrypt\|decode\|plaintext" ${{ inputs.service-path }}/src --include="*.js" --include="*.ts" | grep -v "client-side\|browser"; then
            echo "‚ùå ZK Violation: Server-side decryption detected"
            exit 1
          fi
          
          # Check for encryption bypass
          if grep -r "bypass\|skip.*encrypt\|no.*encrypt" ${{ inputs.service-path }}/src --include="*.js" --include="*.ts"; then
            echo "‚ùå ZK Violation: Encryption bypass detected"
            exit 1
          fi
          
          echo "‚úÖ Zero-Knowledge compliance check passed"

  # Tenant Isolation Check
  tenant-isolation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npm ci
          fi

      - name: Tenant Isolation Check
        run: |
          echo "üè¢ Running tenant isolation checks..."
          
          # Check for tenant_id in database queries
          if [ -f "${{ inputs.service-path }}/src" ]; then
            if find ${{ inputs.service-path }}/src -name "*.js" -o -name "*.ts" | xargs grep -l "SELECT\|INSERT\|UPDATE\|DELETE" | xargs grep -L "tenant_id"; then
              echo "‚ùå Tenant Isolation Violation: Database queries without tenant_id"
              exit 1
            fi
          fi
          
          # Check for cross-tenant access patterns
          if grep -r "cross.*tenant\|tenant.*cross" ${{ inputs.service-path }}/src --include="*.js" --include="*.ts"; then
            echo "‚ùå Tenant Isolation Violation: Cross-tenant access detected"
            exit 1
          fi
          
          echo "‚úÖ Tenant isolation check passed"

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npm ci
          fi

      - name: Run security audit
        run: |
          echo "üõ°Ô∏è Running security audit..."
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npm audit --audit-level=moderate
          fi

      - name: Check for secrets
        run: |
          echo "üîç Checking for exposed secrets..."
          
          # Check for common secret patterns
          if grep -r "password\|secret\|key\|token" ${{ inputs.service-path }}/src --include="*.js" --include="*.ts" | grep -v "process\.env\|import.*env"; then
            echo "‚ùå Security Violation: Potential secrets in code"
            exit 1
          fi
          
          echo "‚úÖ Security scan passed"

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npm ci
          fi

      - name: Run linting
        run: |
          echo "üîç Running code quality checks..."
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            if npm run lint --dry-run 2>/dev/null; then
              npm run lint
            else
              echo "‚ÑπÔ∏è No lint script found"
            fi
          fi

      - name: Check formatting
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            if npm run format:check --dry-run 2>/dev/null; then
              npm run format:check
            else
              echo "‚ÑπÔ∏è No format check script found"
            fi
          fi

  # Test Coverage
  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npm ci
          fi

      - name: Run tests with coverage
        run: |
          echo "üß™ Running tests with coverage..."
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            if npm run test:coverage --dry-run 2>/dev/null; then
              npm run test:coverage
            elif npm run test --dry-run 2>/dev/null; then
              npm run test
            else
              echo "‚ÑπÔ∏è No test script found"
            fi
          fi

      - name: Check coverage threshold
        run: |
          echo "üìä Checking coverage threshold..."
          # This would check actual coverage numbers
          echo "‚úÖ Coverage check passed (placeholder)"

  # Privacy Acceptance Tests
  privacy-tests:
    runs-on: ubuntu-latest
    if: ${{ inputs.enable-playwright }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npm ci
          fi

      - name: Install Playwright
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npx playwright install
          fi

      - name: Run privacy acceptance tests
        run: |
          echo "üîí Running privacy acceptance tests..."
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            if npm run test:privacy --dry-run 2>/dev/null; then
              npm run test:privacy
            else
              echo "‚ÑπÔ∏è No privacy test script found"
            fi
          fi
