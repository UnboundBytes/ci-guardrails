name: Build Test Deploy
on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (develop, staging, production)'
        required: true
        type: string
      service-name:
        description: 'Name of the service'
        required: true
        type: string
      service-path:
        description: 'Path to the service directory'
        required: true
        type: string
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20'
      enable-playwright:
        description: 'Enable Playwright E2E tests'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write  # OIDC to Cloudflare

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-artifacts: ${{ steps.build.outputs.artifacts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npm ci
          fi

      - name: Build service
        id: build
        run: |
          echo "🔨 Building ${{ inputs.service-name }}..."
          
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            
            # Check if build script exists
            if npm run build --dry-run 2>/dev/null; then
              npm run build
              echo "✅ Build completed"
              echo "artifacts=dist" >> $GITHUB_OUTPUT
            else
              echo "ℹ️ No build script found, using source files"
              echo "artifacts=src" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️ No package.json found, using source files"
            echo "artifacts=src" >> $GITHUB_OUTPUT
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service-name }}-build
          path: ${{ inputs.service-path }}/${{ steps.build.outputs.artifacts }}
          retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npm ci
          fi

      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests for ${{ inputs.service-name }}..."
          
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            
            if npm run test --dry-run 2>/dev/null; then
              npm run test
              echo "✅ Unit tests passed"
            else
              echo "ℹ️ No unit tests found"
            fi
          fi

      - name: Run integration tests
        if: ${{ inputs.enable-playwright }}
        run: |
          echo "🧪 Running integration tests for ${{ inputs.service-name }}..."
          
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            
            if npm run test:e2e --dry-run 2>/dev/null; then
              npm run test:e2e
              echo "✅ Integration tests passed"
            else
              echo "ℹ️ No integration tests found"
            fi
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    environment: ${{ inputs.environment }}
    outputs:
      url: ${{ steps.deploy.outputs.url }}
      status: ${{ steps.deploy.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f "${{ inputs.service-path }}/package.json" ]; then
            cd ${{ inputs.service-path }
            npm ci
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.service-name }}-build
          path: ${{ inputs.service-path }}/${{ steps.build.outputs.artifacts }}

      - name: Deploy to Cloudflare
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
          workingDirectory: ${{ inputs.service-path }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Set deployment outputs
        run: |
          echo "url=https://${{ inputs.service-name }}.${{ inputs.environment }}.unboundbytes.workers.dev" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

  # Final validation
  validate-deployment:
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    steps:
      - name: Validate deployment
        run: |
          echo "✅ Deployment validation completed"
          echo "Service: ${{ inputs.service-name }}"
          echo "Environment: ${{ inputs.environment }}"
          echo "Status: ${{ needs.deploy.outputs.status }}"
          echo "URL: ${{ needs.deploy.outputs.url }}"
